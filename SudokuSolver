#tutorial from https://www.youtube.com/watch?v=y1ahOBeyM40

import copy

board4 = [
     ".........",
     "5.3.67...",
     "9..3421..",
     ".....4...",
     "..1...72.",
     "..2.1....",
     ".3......9",
     ".8.1..2..",
     "...75.8.6"
 ]

board = [
    ".........",
    ".........",
    ".........",
    ".........",
    ".........",
    ".........",
    ".........",
    ".........",
    "........."
]

board3 = [
    "6..874.1.",
    "..9.36...",
    "...19.8..",
    "7946.....",
    "..1.894..",
    "...41..69",
    ".7..5..9.",
    ".539.76..",
    "9.2.61.47"
]

def main():
    global board
    for idx,line in enumerate(board):
        board[idx] = list(line)
    solve()
    printBoard()
    #print(getPossibilities(2,2))

def solve():
    global board
    try:
        fillAllObvious()
    except:
        return False
    if isComplete():
        return True
    for rowIdx, row in enumerate(board):
        for colIdx, col in enumerate(row):
            if col == ".":
                i,j = rowIdx, colIdx

    possibilities = getPossibilities(i,j)
    for value in possibilities:
        snapshot = copy.deepcopy(board) #deepcopy is a copy of everything in the list
        board[i][j] = value
        result = solve()
        if result == True:
            return True
        else:
            board = copy.deepcopy(snapshot)

def fillAllObvious():
    global board
    while True:
        somethingChanged = False
        for i in range(0,9):
            for j in range(0,9):
                possibilities = getPossibilities(i,j)
                if possibilities == False:
                    continue
                if len(possibilities) == 0:
                    raise RuntimeError("No moves left")
                if len(possibilities) == 1:
                    board[i][j] = possibilities[0]
                    somethingChanged = True
        if somethingChanged == False:
             return


def getPossibilities(i,j):
    global board
    if board[i][j] != ".":
        return False
    possibilities = {str(n) for n in range (1,10)} ##set of 1-10 in a set, a random sequence in 1-10
    #and sets can be minus-ed easily
    for val in board[i]:
        possibilities = possibilities - set(val) ##access the row of [i]

    for k in range(0,9):
        possibilities = possibilities - set(board[k][j]) ##access the columns of [j]

    #now we start to access the square
    iStart = (i//3)*3
    jStart = (j//3)*3

    subboard = board[iStart:iStart+3]
    for idx,row in enumerate(subboard):
        subboard[idx] = row[jStart:jStart+3]

    for row in subboard:
        for col in row:
            possibilities = possibilities - set(col)

    return list(possibilities)

#only for cosmetically make the board print out better for reading.
def printBoard():
    global board
    for row in board:
        for col in row:
            print(col, end="")
        print("")

def isComplete():
    for row in board:
        for col in row:
            if (col=="."):
                return False
    return True

main()
